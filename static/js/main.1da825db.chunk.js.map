{"version":3,"sources":["carousel/Slide.tsx","carousel/useSlideIndex.ts","carousel/Carousel.tsx","App.tsx","serviceWorker.ts","index.tsx","images/1.jpg","images/2.jpg","images/3.jpg","images/4.jpg","images/5.jpg","images/6.jpg","images/7.jpg","images/8.jpg","images/9.jpg","images/10.jpg"],"names":["useStyles","makeStyles","slide","width","height","maxWidth","img","CarouselSlide","alt","src","classes","className","actualIndex","index","totalLength","modalContent","maxHeight","margin","carouselContainer","position","arrowsContainer","top","left","display","justifyContent","alignItems","srOnly","padding","overflow","clip","border","VirualizedSwipableViews","bindKeyboard","virtualize","SwipeableViews","CarouselContent","slides","title","getTranslations","slidesCount","length","useState","currentIndex","setCurrentIndex","goToPreviousSlide","goToNextSlide","handleChangeIndex","current","currentSlideNumber","previousSlideNumber","nextSlideNumber","useSlideIndex","translations","onChangeIndex","containerStyle","slideRenderer","key","slideToDisplay","Fab","onClick","previousButton","aria-hidden","nextButton","aria-live","status","Carousel","props","Modal","open","BackdropComponent","Backdrop","Fade","appear","in","Paper","image1","image2","image3","image4","image5","image6","image7","image8","image9","image10","App","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.1da825db.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core';\n\nexport type CarouselSlideProps = {\n  src: string;\n  alt: string;\n};\n\nconst useStyles = makeStyles({\n  slide: {\n    width: '100%',\n    height: 'auto',\n    maxWidth: '100%',\n  },\n  img: {\n    width: '100%',\n    height: 'auto',\n  },\n});\n\nexport function CarouselSlide({ alt, src }: CarouselSlideProps) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.slide}>\n      <img className={classes.img} src={src} alt={alt || ''} />\n    </div>\n  );\n}\n","import { useState } from 'react';\n\ntype UseSlideIndexReturn = {\n  goToPreviousSlide: () => void;\n  goToNextSlide: () => void;\n  handleChangeIndex: (currentIndex: number) => void;\n  currentSlideNumber: number;\n  previousSlideNumber: number;\n  nextSlideNumber: number;\n};\n\nexport function actualIndex(index: number, totalLength: number) {\n  return ((index % totalLength) + totalLength) % totalLength;\n}\n\nexport function useSlideIndex(length: number): UseSlideIndexReturn {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const handleChangeIndex = (current: number) => setCurrentIndex(current);\n\n  // For human readable texts\n  const currentSlideNumber = actualIndex(currentIndex, length) + 1;\n  const previousSlideNumber = actualIndex(currentIndex - 1, length) + 1;\n  const nextSlideNumber = actualIndex(currentIndex + 1, length) + 1;\n\n  const goToNextSlide = () => setCurrentIndex(currentIndex + 1);\n  const goToPreviousSlide = () => setCurrentIndex(currentIndex - 1);\n\n  return {\n    goToPreviousSlide,\n    goToNextSlide,\n    handleChangeIndex,\n    currentSlideNumber,\n    previousSlideNumber,\n    nextSlideNumber,\n  };\n}\n","import React from 'react';\nimport { CarouselSlide, CarouselSlideProps } from './Slide';\nimport SwipeableViews from 'react-swipeable-views';\n// @ts-ignore\nimport { virtualize, bindKeyboard } from 'react-swipeable-views-utils';\nimport {\n  Backdrop,\n  Fab,\n  Fade,\n  makeStyles,\n  Modal,\n  Paper,\n} from '@material-ui/core';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport { actualIndex, useSlideIndex } from './useSlideIndex';\n\nconst useStyles = makeStyles({\n  modalContent: {\n    maxWidth: '90vw',\n    maxHeight: '90vh',\n    margin: '0 auto',\n  },\n  carouselContainer: {\n    position: 'relative',\n  },\n  arrowsContainer: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    top: 0,\n    left: 0,\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  srOnly: {\n    position: 'absolute',\n    width: '1px',\n    height: '1px',\n    padding: 0,\n    margin: '-1px',\n    overflow: 'hidden',\n    clip: 'rect(0, 0, 0, 0)',\n    border: 0,\n  },\n});\n\nconst VirualizedSwipableViews = bindKeyboard(virtualize(SwipeableViews));\n\nfunction CarouselContent({ slides, title, getTranslations }: CarouselProps) {\n  const classes = useStyles();\n  const slidesCount = slides.length;\n\n  const {\n    goToPreviousSlide,\n    goToNextSlide,\n    handleChangeIndex,\n    currentSlideNumber,\n    previousSlideNumber,\n    nextSlideNumber,\n  } = useSlideIndex(slidesCount);\n\n  const translations = getTranslations(\n    currentSlideNumber,\n    nextSlideNumber,\n    previousSlideNumber,\n    slidesCount\n  );\n\n  const slideRenderer = ({ index, key }: any) => {\n    // Translate the virtual index to an actual slide to display.\n    const slideToDisplay = actualIndex(index, slides.length);\n    const slide = slides[slideToDisplay];\n    return <CarouselSlide key={key} {...slide} />;\n  };\n\n  return (\n    <>\n      {title && <h3>{title}</h3>}\n      <div className={classes.carouselContainer}>\n        <VirualizedSwipableViews\n          onChangeIndex={handleChangeIndex}\n          index={currentSlideNumber - 1}\n          containerStyle={{\n            alignItems: 'center',\n          }}\n          slideRenderer={slideRenderer}\n        />\n        <div className={classes.arrowsContainer}>\n          <Fab onClick={goToPreviousSlide}>\n            <span className={classes.srOnly}>\n              {translations.previousButton}\n            </span>\n            <ArrowBackIcon aria-hidden />\n          </Fab>\n          <Fab onClick={goToNextSlide}>\n            <span className={classes.srOnly}>{translations.nextButton}</span>\n            <ArrowForwardIcon aria-hidden />\n          </Fab>\n        </div>\n        <div aria-live=\"polite\">{translations.status}</div>\n      </div>\n    </>\n  );\n}\n\nexport type CarouselTranslations = {\n  nextButton: string;\n  previousButton: string;\n  status: string;\n};\n\nexport type CarouselProps = {\n  slides: CarouselSlideProps[];\n  title?: string;\n  getTranslations: (\n    currentSlideNumber: number,\n    nextSlideNumber: number,\n    previousSlideNumber: number,\n    slidesCount: number\n  ) => CarouselTranslations;\n};\n\nexport function Carousel(props: CarouselProps) {\n  const classes = useStyles();\n\n  return (\n    <Modal open={true} BackdropComponent={Backdrop}>\n      <Fade appear in={true}>\n        <Paper className={classes.modalContent}>\n          <CarouselContent {...props} />\n        </Paper>\n      </Fade>\n    </Modal>\n  );\n}\n","import React from 'react';\nimport { CssBaseline } from '@material-ui/core';\nimport { Carousel } from './carousel';\n\n// Test images\nimport image1 from './images/1.jpg';\nimport image2 from './images/2.jpg';\nimport image3 from './images/3.jpg';\nimport image4 from './images/4.jpg';\nimport image5 from './images/5.jpg';\nimport image6 from './images/6.jpg';\nimport image7 from './images/7.jpg';\nimport image8 from './images/8.jpg';\nimport image9 from './images/9.jpg';\nimport image10 from './images/10.jpg';\nimport { CarouselTranslations } from './carousel/Carousel';\n\nconst slides = [\n  {\n    src: image1,\n    alt: 'Image 1',\n  },\n  {\n    src: image2,\n    alt: 'Image 2',\n  },\n  {\n    src: image3,\n    alt: 'Image 3',\n  },\n  {\n    src: image4,\n    alt: 'Image 4',\n  },\n  {\n    src: image5,\n    alt: 'Image 5',\n  },\n  {\n    src: image6,\n    alt: 'Image 6',\n  },\n  {\n    src: image7,\n    alt: 'Image 7',\n  },\n  {\n    src: image8,\n    alt: 'Image 8',\n  },\n  {\n    src: image9,\n    alt: 'Image 9',\n  },\n  {\n    src: image10,\n    alt: 'Image 10',\n  },\n];\n\nfunction getTranslations(\n  currentSlideNumber: number,\n  nextSlideNumber: number,\n  previousSlideNumber: number,\n  slidesCount: number\n): CarouselTranslations {\n  return {\n    nextButton: `Go to slide ${nextSlideNumber}`,\n    previousButton: `Go to slide ${previousSlideNumber}`,\n    status: `Slide ${currentSlideNumber} over ${slidesCount}`,\n  };\n}\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <CssBaseline />\n      <div className=\"App\">\n        <Carousel\n          getTranslations={getTranslations}\n          slides={slides}\n          title=\"Test Carousel\"\n        />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/1.43e4c49e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.f7d19951.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.dc8a3344.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.e2df36ff.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.0b400027.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6.32cfee3f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/7.35128041.jpg\";","module.exports = __webpack_public_path__ + \"static/media/8.67a0cb42.jpg\";","module.exports = __webpack_public_path__ + \"static/media/9.d09e100b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/10.61757b73.jpg\";"],"sourceRoot":""}