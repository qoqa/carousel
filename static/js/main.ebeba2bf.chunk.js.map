{"version":3,"sources":["images/1.jpg","images/2.jpg","images/3.jpg","images/4.jpg","images/5.jpg","images/6.jpg","images/7.jpg","images/8.jpg","images/9.jpg","images/10.jpg","carousel/Slide.tsx","carousel/useSlideIndex.ts","carousel/Carousel.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","useStyles","makeStyles","slide","width","height","maxWidth","img","CarouselSlide","alt","src","classes","className","nextIndexInDirection","currentIndex","maxIndex","direction","index","container","position","arrowsContainer","top","left","display","justifyContent","alignItems","Carousel","slides","title","slidesLength","useState","slideIndex","setSlideIndex","previousIndex","nextIndex","previousSlide","nextSlide","handleChangeIndex","current","useSlideIndex","length","onChangeIndex","containerStyle","map","key","id","Fab","onClick","titleAccess","aria-live","image1","image2","image3","image4","image5","image6","image7","image8","image9","image10","App","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ebeba2bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.43e4c49e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.f7d19951.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.dc8a3344.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.e2df36ff.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.0b400027.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6.32cfee3f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/7.35128041.jpg\";","module.exports = __webpack_public_path__ + \"static/media/8.67a0cb42.jpg\";","module.exports = __webpack_public_path__ + \"static/media/9.d09e100b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/10.61757b73.jpg\";","import React from 'react';\nimport { makeStyles } from '@material-ui/core';\n\nexport type CarouselSlideProps = {\n  id: string;\n  src: string;\n  alt: string;\n};\n\nconst useStyles = makeStyles({\n  slide: {\n    width: '100%',\n    height: 'auto',\n    maxWidth: '100%',\n  },\n  img: {\n    width: '100%',\n    height: 'auto',\n  },\n});\n\nexport function CarouselSlide({ alt, src }: CarouselSlideProps) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.slide}>\n      <img className={classes.img} src={src} alt={alt || ''} />\n    </div>\n  );\n}\n","import { useState } from 'react';\n\ntype UseSlideIndexReturn = {\n  previousSlide: () => void;\n  nextSlide: () => void;\n  handleChangeIndex: (currentIndex: number) => void;\n  slideIndex: number;\n};\n\nfunction nextIndexInDirection(\n  currentIndex: number,\n  maxIndex: number,\n  direction: 'next' | 'previous'\n): number {\n  const index = currentIndex + (direction === 'next' ? +1 : -1);\n  if (index < 0) {\n    return maxIndex;\n  }\n\n  if (index >= maxIndex) {\n    return 0;\n  }\n\n  return index;\n}\n\nexport function useSlideIndex(slidesLength: number): UseSlideIndexReturn {\n  const [slideIndex, setSlideIndex] = useState(0);\n  const handleChangeIndex = (current: number) => setSlideIndex(current);\n\n  const maxIndex = slidesLength - 1;\n  const previousIndex = nextIndexInDirection(slideIndex, maxIndex, 'previous');\n  const nextIndex = nextIndexInDirection(slideIndex, maxIndex, 'next');\n\n  const nextSlide = () => setSlideIndex(nextIndex);\n  const previousSlide = () => setSlideIndex(previousIndex);\n\n  return {\n    previousSlide,\n    nextSlide,\n    handleChangeIndex,\n    slideIndex,\n  };\n}\n","import React from 'react';\nimport { CarouselSlide, CarouselSlideProps } from './Slide';\nimport SwipeableViews from 'react-swipeable-views';\nimport { Fab, makeStyles } from '@material-ui/core';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport { useSlideIndex } from './useSlideIndex';\n\ntype CarouselProps = {\n  slides: CarouselSlideProps[];\n  title?: string;\n};\n\nconst useStyles = makeStyles({\n  container: {\n    position: 'relative',\n  },\n  arrowsContainer: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    top: 0,\n    left: 0,\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n});\n\nexport function Carousel({ slides, title }: CarouselProps) {\n  const classes = useStyles();\n\n  const {\n    previousSlide,\n    nextSlide,\n    handleChangeIndex,\n    slideIndex,\n  } = useSlideIndex(slides.length);\n\n  return (\n    <>\n      {title && <h3>{title}</h3>}\n      <div className={classes.container}>\n        <SwipeableViews\n          onChangeIndex={handleChangeIndex}\n          index={slideIndex}\n          containerStyle={{\n            alignItems: 'center',\n          }}\n        >\n          {slides.map(slide => (\n            <CarouselSlide key={slide.id} {...slide} />\n          ))}\n        </SwipeableViews>\n        <div className={classes.arrowsContainer}>\n          <Fab onClick={previousSlide}>\n            <ArrowBackIcon titleAccess=\"Previous\" />\n          </Fab>\n          <Fab onClick={nextSlide}>\n            <ArrowForwardIcon titleAccess=\"Next\" />\n          </Fab>\n        </div>\n        <div aria-live=\"polite\">\n          Slide {slideIndex + 1} over {slides.length}\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport { CssBaseline } from '@material-ui/core';\nimport { Carousel } from './carousel';\n\n// Test images\nimport image1 from './images/1.jpg';\nimport image2 from './images/2.jpg';\nimport image3 from './images/3.jpg';\nimport image4 from './images/4.jpg';\nimport image5 from './images/5.jpg';\nimport image6 from './images/6.jpg';\nimport image7 from './images/7.jpg';\nimport image8 from './images/8.jpg';\nimport image9 from './images/9.jpg';\nimport image10 from './images/10.jpg';\n\nconst slides = [\n  {\n    src: image1,\n    alt: 'Image 1',\n    id: 'slide1',\n  },\n  {\n    src: image2,\n    alt: 'Image 2',\n    id: 'slide2',\n  },\n  {\n    src: image3,\n    alt: 'Image 3',\n    id: 'slide3',\n  },\n  {\n    src: image4,\n    alt: 'Image 4',\n    id: 'slide4',\n  },\n  {\n    src: image5,\n    alt: 'Image 5',\n    id: 'slide5',\n  },\n  {\n    src: image6,\n    alt: 'Image 6',\n    id: 'slide6',\n  },\n  {\n    src: image7,\n    alt: 'Image 7',\n    id: 'slide7',\n  },\n  {\n    src: image8,\n    alt: 'Image 8',\n    id: 'slide8',\n  },\n  {\n    src: image9,\n    alt: 'Image 9',\n    id: 'slide9',\n  },\n  {\n    src: image10,\n    alt: 'Image 10',\n    id: 'slide10',\n  },\n];\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <CssBaseline />\n      <div className=\"App\">\n        <Carousel slides={slides} title=\"Test Carousel\" />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}